dist: xenial

services:
  - docker

env:
  global:
    - IMAGE_NAME=sisock

language: python
python:
  - "3.6"

stages:
  - test
  - name: dockerize
    #if: tag IS present

jobs:
  include:
    - stage: test
      install:
        - pip install -r requirements.txt .
      script:
        - pytest tests/

    - stage: dockerize
      install: true

      before_script:
        # Use the git tag to tag docker image
        - export DOCKER_TAG=`git describe --tags --always`
        # Login to docker
        - echo "${REGISTRY_PASSWORD}" | docker login "${REGISTRY_URL}" -u "${REGISTRY_USER}" --password-stdin;

      script:
        # Build the docker images with docker-compose
        - docker-compose build

        ## Build the docker image
        #- docker build -t ${REGISTRY_URL}/${IMAGE_NAME}:${DOCKER_TAG} .
        ## Make sure we can import sisock in container
        #- docker run --rm ${REGISTRY_URL}/${IMAGE_NAME}:${DOCKER_TAG} /usr/bin/python3 -c "import sisock"

      after_success:
        # Tag all images for upload to the registry
        - "docker-compose config | grep 'image: ' | awk -F ': ' '{ print $2 }' | xargs -I {} docker tag {}:latest ${REGISTRY_URL}/{}:latest"
        - "docker-compose config | grep 'image: ' | awk -F ': ' '{ print $2 }' | xargs -I {} docker tag {}:latest ${REGISTRY_URL}/{}:${DOCKER_TAG}"

        # Upload to docker registry
        - "docker-compose config | grep 'image: ' | awk -F ': ' '{ print $2 }' | xargs -I {} docker push ${REGISTRY_URL}/{}:${DOCKER_TAG}"
        - "docker-compose config | grep 'image: ' | awk -F ': ' '{ print $2 }' | xargs -I {} docker push ${REGISTRY_URL}/{}:latest"
        - "docker-compose config | grep 'image: ' | awk -F ': ' '{ print $2 }' | xargs -I {} echo '${REGISTRY_URL}/{}:${DOCKER_TAG} pushed'"
        ## Upload docker image
        #- docker push ${REGISTRY_URL}/${IMAGE_NAME}:${DOCKER_TAG}
        #- docker tag ${REGISTRY_URL}/${IMAGE_NAME}:${DOCKER_TAG} ${REGISTRY_URL}/${IMAGE_NAME}:latest
        #- docker push ${REGISTRY_URL}/${IMAGE_NAME}:latest
        #- echo "Docker image 'docker push ${REGISTRY_URL}/${IMAGE_NAME}:${DOCKER_TAG}' pushed"
